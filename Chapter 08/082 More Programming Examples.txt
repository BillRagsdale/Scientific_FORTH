176 Channﬂ-MorePrognmthnm

\ COPYRIGHT 1991 JUUAN v. NOBLE
TASK IN1EGRAL
FIND CP@L o= ?( FLOAD COMPLEX)
\ deﬁne data-type tokens 11 not already
FIND REAL-4 o = 7(((

o CONSTANT REAL-4

1 CONSTANT REAL'B

2 CONSTANT COMPLEX

a CONSTANT DCOMPLEX )))

FIND 1ARRAY 0= ?(FLOAD MATRIXHSF )
\function usage
:USE( [OOMPILE] ' CFA ; IMMEDIATE

\ BEHEADing starts here
0 VAR N

:inc.N N1+ ISN;
:dec.N N2- ISN;

OVAR type

\ deﬁne “stack"
20 LONG REAL-a 1ARRAY X{
20 LONG REALM 1ARRAY E{
20 LONG DCOMPLEX 1ARRAY F{
20 LONG DCOMPLEX 1ARRAY 1{

2 DCOMPIEXSCALARS old.| ﬂmIJ
:)imegral (n--)\trapezoidal n19
X{ OVER } G@L
X{ OVER 1- } G@L
F- F2/
F{ OVER } G@L
F{ OVER 1-} G@L
typez AND
IF X+ FROT X‘F
ELSE F+ F' THEN
I{ SWAP 1- } GlL ;
0VARI.mme
: f(x) tname EXECUTE ;

 

samronm
:INI‘HNJZE

IStype\m1ype
typoF{l
type|{ l\oettypesforfma|on
type 'oldJ!
typo 'ﬂrﬂ.” \andﬂewaKs)
type 1 AND X{!

\Satypeforhdep.var.
E{0} G!L \storeenot
x{1}G!L \storeB
X{O} G!L \sloraA
IS name \!claoff(x)

X{O}G@L 1(x) F{O} G!L
X{1}G@L f(x) P{1}G1L

1ISN

N)integrd

typezAND IF F=0 THEN
F=0 ﬁnall G!L

FINrT ;

:E/2 E{N1-} G@L F2! E{N1-} G!L:

:}move.down (adrn--)

} #BYI'ES >R (usegoﬁ)
DDUP R@ +
(--s.seg S.oﬂ d.sag doll)
R> CMOVEL ;
: MOVEDOWN

E{ N 1— }move.down
X{ N }move.down
F{ N }mova.dcmn ;

:new.X (87:--x')
X{N}G@L X{N1-}G@L
F+ F2! FDUP X{N} G!L ;

\Conl’d.

MM"!

\NTEGﬂALm'd
\mm
:0F.1> IFFSWAP E.Tl-ENE.:
:FO. DLP>R G@L R> 0F. ;
:.8TAO<S CR ."N"
OCTAB ."X'
19cm .~Ro{Poor
31CTAB."Im{F(X)]"
«cm ."Rem"
57CTAB."|m[I]"
71CTAB."E"
N2+ 000 OR I.
3CTAB X{I}F@.
tecTAB F{I} F@.
42CTAB |{l} F@.
escrAa E{I} F@.
LOOP
CR SSPACES."dd.I =" dd.l F@.

SSPACES ."MJ =“WJ F@. CR ;

USE: <MBUG> NEXT.STACKS :GASE
DVAR (DEBUG)
:W

:DasUG (DEBUG) <DEBUG>;

:SUBDMDE
N19> ABORT‘Toonanyubdeom!"
EIZ MOVEDOWN
I{N1-} DROP ddl #BYTES CMOVEL
nan for) F{N}GIL
N)htemi N1+)negtu;

Ml-MPWW

1IS(DBUG)5#PLACESI :
:EBUG-CFF OIS (DEBUG) 7#PLACES! ;

 

177

:CCNVERGED? (C7:--l[N]H'[N-1H[N—1]z--n
'(MGOLHM-mot unmet
type 2 Am
IF CP- CP+ CPDUP CPAas
ELSE F- F+ FDUP FABS
THEN
E{Nt-)G@L Fr F<;

CASE: 9'! CP'F F' :CASE
4S->F 38->F Fl FWNSTANT Fad/3

:INTERPOMTE (G7: I[N] +I'[N—1]4[N-1]- -)
F-4/3 type 2/ 9'!
old.l G@L N.IG@L
typeZAND
IF CP+ CP+
ELSE F+ F+
W.IG!L ;
\BEHEADhgendshera

THEN

:)INI'EGRAL (37: A B ERR - - I[A.B])
INI'HNJZE
BEGIN N0>
WHILE SUBDMDE DEBUG
CONVERGED? th
IF INTERPOLATE dec.N
ELSE typezAND IF FDROP
THEN FDROP
THEN
REPEAT WA G@L :
BEHEAD" N INTERPOLATE \oﬂw
\USE(F.name%A%B%E type)lNTEGRAL

The nonrecursive program obviously requires much more code
than the recursive version. This is the chief disadvantage of a

nonrecursive method

 

11‘. The memory usage is shout the same: the recursive method pushes limits, etc. onto the (suck.

emvNounm—Almw.

“5-4 Example of )INTEGRAL IN USE

Chapter 3 - More Programming Exampteo Scientiﬁc FOR? ,

   
  

he debugging code (“DEBUG-ON") lets us track the executio
of the program by exhibiting the simulated stacks. Here is a
2

example, fdr t/f:
1
USE( FSQRT 96 1. 96 2. 96 1.5-3 REAL'4 )INTEGRAL E

0 LMH'D 1.0000E+oo 5.5618501 50113504
1 1.5m-H'D 12247E+w 8.5973501 5.0mm
2 zoomsmo 1.41425+m 1.433501 125M504
old.l=1.m71E+w ﬁnalJ = omooE+oo

0 1.ooooE+oo tm-H'D 5.5618E01 50000an
1 1.5m+m 12247504!) 3.1845E01 250001504
2 1.7503544!) 1.32%E+CD 3.4213501 ZSGDE04
3 2.ooooe+oo 1.4142£+m 1.7m01 12513504
oldJ = 6.$73501 ﬁnalJ = o.omoE+oo

O LOWEH'D LMHD 5.5618501 sonooeoa
1 1.5GDE+CIJ 1.2247E+CD 3.1845501 25000604
2 1.7EKDE+m 1323500 1.6825501 125W504
3 1.8750E+(XJ 1.3ME+(D 1.7m501 1mm

4 zooooE+oo 1.414ZE+m o.ooooE+oo o.ooooE+oo

old] = 3.4213501 ﬁnall = oamE+oo

O IQIDEH'D 1QIDE+CD 5.5618501 sooooem
1 1.5m+(0 12247E+m 1.5&1501 1M“
2 1.650900 12747E+m 1.6M01 12500604
3 1.75mE+CD 1.3235H'D 1.7ME01 1.2511504
oldJ = 3.1845E0‘I ﬁnal! = 3.42%E01

 

I E N X F I E

O 1.m+m tm+m 2.6475501 251111504
1 12500E+oo 1.11&£+m 2.9284501 2mm
2 1.5GDE+W 12247E+m 1.625501 1.251504
old.| = 5.5818501 fin-LI = 8.EB7E01

O tm+m 1.m+m 2.8475E01 M414
1 1.25an+oD 1.11wE+w 1.4316501 tzsmeoa
2 Lam-HI) 1.1723E+oo 1.4mm 1mm
3 1.m5+m 12247E+m 1.7m01 1mm
old.| = 2.9234501 ﬁnllJ = 6.m01

o1.ooaoE+ao 1.0000E+0012579E01 1251504
1 1.1250544!) tmE-HD 1.3616501 1.231204
2 12500E+oo 1.11wE+CD 1.4mm 12mm
oldJ = 2.6475501 ﬁnalJ = 9.5ME01
1.21&E+m 0k

\

 

dx1/'=§ (23/2—1)

dSN

 

 

 

 

Notice that, although t/f is perfectly ﬁnite atx = 0, its ﬁrst derivav
tive is not. This is not a problem in the above case, because the:
lower limit is 1.0.

It is an instructive exercise to run the above example with the'
limits (0.0, 1.0). The adaptive routine spends many iterations:
approachingx = 0 (25 in the range [0,, 0.0625] vs. 25 in the ranger:
[0.0625, 1.0] ). This is a concrete example of how an adaptive-1
routine will unerringly locate the (integrable) singularities of at
function by spending lots of time near them. The best answer to:
this problem is to separate out the bad parts of a function by hand...
if possible, and integrate them by some other algorithm that take
the singularities into account. By the same token, one shoul
always integrate up to, but not through, a discontinuity in f(x).

WFORTH MI-mwem 179

"6 mmmmmm

We often want to evaluate the complex integral

1 - +1 «21.1: (16)

where I‘ is a contour (simple, closed, piecewise tinuous curve)
in the complex z-plane, and 1(2) is an analytic1 function of z.

The easiest way to evaluate 16 is to parameterize 2 as a function
of a real variable t ; as 1 runs from A to B, z(t) traces out the
contour. For example, the parameten'zation

z(t) = 20 + R cos(t) + iR sin(t) , 05152: (17)

traces out a (closed) circle of radius R centered at 2 =20

We assume that the derivative 2(t) E E can be deﬁned; then the

dt
integral 16 can be re-written as one over a real interval, with a
complex integrand:
I = Ii 2(1)f(z(1)) d: (18)

Now our previously deﬁned adaptive function )INTEGRAL can
be applied directly, with Emma the name of a complex funcan

:0) = 2(t)f(z(r)). (19)
of the real variable I.

Here is an example of complex integration: we integrate the

function ﬂz) = el/z around the unit circle in the counter-clock-
wise (positive) direction.

 

7. “Analytic"meanstheordinaryderivativedf(z)/dzeidsts.Consultanygoodtenonthetheoryof
Wdampkxvariable.

OJUUIVNOUOIM-Almm.

160

The calculus of residues (Cauchy's theorem) gives

é 4n” = 2771'
Iz|=1

We parameterize the unit circle as z(t)- — cos(27rt) + i sin(2.m
hence z(t) = 27tiz(t), and we might as well evaluate

I; dtz(t) 21/2“) E 1.

For reasons of space, we exhibit only the ﬁrst and last few iterationst

ChapterO-MoraProgrammIngEnmpIoa

semmmeronn

(20)

(21)

 

I

FIND FSINCOS O= ?( FLOAD TRIG) E.

:20) F: PI

Ft

F2* FSINCOS; (07:1 - -4

:)(EXP FSINCOS FROT FEXP X*F; g
(87. xy--e "xcos[y] e "xsixn[y])
:G(T) Z(T) XDUP 1/X XEXP ,

USE( G(T) % 0 %1 % 1.52 COMPLEX )INTEGRAL X. '

DEBUG- ON
N x F 1 E
0 0.0000 27102 0.0000 .50100 0.0000 0010900
1 .50000 -.3s707 0.0000 .50700 0.0000 mm

2 1.011113 2.7182 0.0000 .00000 .00000 .0000000
old.l = 2.7162 0.0000 ﬁnaIJ = OIXID 0.0000

N X F l E
0 0.0000 2.7182 0.0000 .50700
1 .SOGD -.$787 00000

0.0000 0040900
00190 .067537 .WW
2 75¢!” .84147 -.54030 .44496 -.007537 0024099
3 1.0000 2.7182 0.0m0 011100 .00000 .0000000
oIdJ = 587% 0.0000 ﬁnaIJ = OIXXD 0.0000

N X F I E

0 0me 2.7182 0.0111) 567% 0.0000 0049000

1 ﬁlm-.5767 0.0000 .(591U-IE7537 £1124“
2 .7501) 34147-5403 .17“ -.oaasaz 0012400
3 .873!) 20219-15662 29020 4100014 001249
4 1.0000 2.7162 0.0000 .00000 000000 01110000
oId.I = .444” -.N7537 1Inll.l - 0.0000 0.00:»

N X F I E

0 0.0000 2.7162 0.0000 .5673) 0.0111) mm

1 SC!!!) 23787 0.0000 .W1U aWS'ST mean
2 .7511!) 34147-5401) .17” -.043002 .0012“
3 .875” 20210-15002 .1413) 413745 .00002400
4 00750 2519-0253 Team-name .tmezm
5 1mm 2.7162 0.01110 .ooamo .ootnoo .amm
Didi - maze-omens MALI - 0.0000 0.01110

 

N X F I E

0 0.0011) 2.7162 00000 56760 0.0000 noun

1 .50000-36707000113 .W1Q 457537 .112“ >'
2 .75000 54147-5461) .1790 mean .0312“

3 .8751!) 2.0219-.15& .14190-m5745 .m
4 33750 251$-.m .m1M-.m 00001240
5 .3875 2.6% -.00:10577 .06414 -.000055 11113120
6 MIX!) 27182 0.0000 .000000 .0000000 1111!!!!)
oId.| = Aw-IXDTBMZ ﬁne“ = 0.0000 0.00m

N X F I E

0 0.01110 2.7162 0.0000 .5373) 0.0000 mama

1 50000-30707 0.0000 .050190-007537 mama
2 .75CKD .84147 -.s4m0 176$ -.oaaaa2 011249

3 .8751!) 2.0219-.15W 14190-000745: .m
4 .ﬂ750 asm-mszza £0102 -.(ID4467 #1312“
5 .m 2.6% -.ooaasn 04197-101“ .IXXMW
6 .W 27052 010020 .042371 -.ommaa .tm1sa‘z4
7 1.0000 2.7162 0.0011) 0.0003 0.001!) 11mm

old.| s .004137-mm52405 ﬁnil = noun 001m

x F 1 E

0.0000 27102 00000 .50700 0.01100 0010000
.50000 -.30707 0.0000 000100 -.oe7rm mum
75000 54147-54000 .1701: -.0m2 001249
07000 2.0210-.15002 .14100 -.0m745 00002000 5
4 00750 20100-02022 .010000-.000a:10.00015024

0 30312 20000.011000041173-000112000010024

0 00075 2005-.00000001571-0011110001010024
0th - .001022-.000«007 mu - owns-mm

N
0
1

2
3

N X F I E

0 cm 2.718 can: mm mm .0312.

1 12m 2.0210 .1092 .1075! .0164" .m

I .167” 1.41” m M711 01m ammo

I 21675 1.1ﬂ4 .aaaan m .0157” ammo

4 m .4147 54GB mm 0010070 0mm

“I - m mum Hill - 51W—m

N X F I E

0 cm 2.71” 0.00:!) as: £1.13. .m12“
1 .12” 2.0216 .15” mum 01101200
I .1” 1.7232 ms .04“ m.m1240
3 .10700 1.4M 3073 name 01578 01101240
ddl - .1079 916479 W1 - .3374 4mm

N X F l E

0 0m 2.7162 om ﬁlm 00073421100de
1 .0023!) 2.51” 0329.141” 1157453 0003200
2 .12“ 2.0210 .1532 04011: 00300300001249
ddl - 29m 0mm ﬁn.” - .ﬂ13-1X55266

N X F l E

0 0001:) 2.71& cm am mam
1 mama 2.51“ mm 075m @133 00001240
2 M749 mmntmsrmasm .m1249
3 .125!) 2.0219 .15” moms 015/26 .m12ﬂ
dﬂl - .141” ”7453 fnlll - $13 415528

N X F l E

0 0.0000 2.7182 00000 .1623 manuam

1 10m 251” m manna: M1249
2 mac 2.254 “75 134633.101“ .CXDIM
3 .1” 2.1032 .11“ “11.121“ 00015024

4 .1253 2.0219 .1902 m7m76 “1&4
de - M457 .0113!» Mall I miss-.maaa

52 Fltﬁng functions to data

 

N X F I E

0 cm 2.71” cm .1“ .W.m
1 M2510 .mm .mumm
2 07.182419047044m .mmcmstm
3 mommm.tm1m.mm
de - 075m 011“? Md! - .m-mtam

N X F l E

0 cm 27102001» new .m ammo

1 m1- 2.” W 1mm .M #1312“
2 W251“ .mm .MYLGXMW
ddl - .1” names: “I - ham-.m

N X F I E

0 00000 2.719 001m “4137 .m £11312“

1 mtao zen W7 .041173 M1247 00310024
2 0465752” .011“ mam.m.antasas
3 138132.510. 1330002110 .M‘Iﬂﬁ

oIdJ - 001022 .W “J - mas-00040523

N X F I E

0 00cm 2.7182 0.01113042371 m1 .CID1!£24

1 015% 27W m2 .041” 0001200 an 5624

2 .6313) 2.6” .W .osam m .m15ﬂ4
oId.l - M4137 .m “J - 31$B<m6373
.0001» 90000001 oIr

\

 

Note:
answer = 1

 

 

 

One of the, most important applications of numerical analysis is
the representation of numerical data in functional form. This
includes ﬁtting, smoothing, filtering, interpolating, etc.

A typical example is the problem of table lookup: a program re-
quires values of some mathematical function —sin(x), say — for
arbitrary values of x. The function is moderately or extremely
time-consuming to compute directly. According to the Intel tim-

oJuthNobIolm—Mmmarvod.

162

CMptarB-MoreProgmmnIngExamdac ScbnllﬂcFOR

 
   
  
   

ings for the 801187 chip, this operation should take about 8 tim
longer than a floating point multiply. In some real-time app '
tions this may be too slow.

There are several ways to speed up the computation of a functit
They are all based on compact representations of the fun '
-—either in tabular form or as coefﬁcients of functions that a
faster to evaluate. For example, we might represent sin(x) by'
simple polynomial1

sin(x) ~x (0.994108 - 0.1472021) , (22) 1

,_
I
accurate to better than 1% over the range -% S x 5 g , thg'

requires but 3 multiplications and an addition to evaluate.
would be twice as fast as calculating sin(x) on the 80x87 chip1 .2

To achieve substantially greater speed requires table look-It]:

To locate data in an ordered table, we might employ binar3
search: that is, look at the x-value halfway down the table and se
if the desired value is greater or less than that. On the averag.
log2(N) comparisons are required, where N is the length of tla
table. For a table with 1% precision, we might need 128 entriet
i.e. seven comparisons.

 

Binary search is unacceptably slow — is there a faster methodl
In fact, assuming an ordered table of equally-spaced abscissae tlu
fastest way to locate the desired x-value is hashing, a method it!
computing the address rather than ﬁnding it using comparisom
Suppose, as before, we need 1% accuracy, i.e. a 128-point tablr’
with x in the range [0,:1/2]. To look up a value, we multiply: in
256/77 5 81.5, truncate to an integer and quadruple it to get 1
(4-byte) ﬂoating point address. These operations —includi1§
fetch to the 87stack— take about 1.5-2 fp multiply times, hencl
the speedup is 4-fold.

curl—MW!” 163

The speedup factor does not seem like much, especially for a
function such as sin(.r) that is built into the fast co-processor.
However, if we were speaking of a function that is considerably
slower to evaluate (for example one requiring evaluation of an
integral or solution of a differential equation) bashed table
lookup with interpolation can be several orders of magnitude
faster than direct evaluation.

e now consider how to represent data by mathematical func-
tions. This can be useful in several contexts:

o The theoretical form of the function, but with unknown param-
eters, may be known. One might like to determine the param-
eters from the data. For example, one mi t have a lot of data
on pendulums: their periods, masses, imensions, etc. The
penod of a pendulum IS given, theoretically, by

1/2
- a L&
r—(g) f(r’ ."") (23)

where Lis the length of the string, g the acceleration of gravity,
and f is some function of ratios of typical lengths, masses and
other factors in the problem. In order to determine g accurate-
ly, one generally ﬁts a function of all the measured factors, and
tries to minirmze its deviation from the measured periods.
That is, one might try

1/2
21 1'11 mbob
7n: (Tl-1') 1+a—L‘+ﬂ( . ) +... (24)

for the n'th set of observations, with g, (2, ﬂ, the unknown
parameters to be determined.

0 Sometimes one knows that a phenomenon is basically smooth-
ly varying; so that the wiggles and deviations in observations
are noise or otherwise umnteresting. How can we ﬁlter out the
noise without losing the signiﬁcant part of the data? Several
methods have been developed for this gurpose, based on the
same principle: the data are represente as a sum of functions
from a complete set of functions, with unknown coefﬁcients.
That is, if 90.,(x) are the functions, we say (y. are the data)

C

Ya E 2 C. plan) (25)

m-o

OJLIHnVNobIatm—Alnoﬂaroaarvod.

Chapters-MoreProgrammlng Examples Schnﬁnc FORT

Such representations are theoretically possible under gene
conditions. Then to ﬁlter we keep on] a ﬁnite sum, retainin
the ﬁrst N (usually simplest and smoot est) functions from th
set. An example of a complete set is monomials, ¢,(x) = x m
Another is sinusoidal (trigonometric) functions,

sin(2:rm.r), cos(27rmx), 0 s x s 1,

used in Fourier-series representation. Gram polynomials, dis
cussed below, comprise a third useful complete set.

The representation in Eq. 25 is called linear because the urts

known coefﬁcients cm appear to their ﬁrst power. Thus, if a”
the data were to double, we see immediately that the cm's would
have to be multiplied by the same factor, 2. Sometimes, as in the
example of the measurement of g above, the unknown paratr~
eters appear in more complicated fashion. The problem of ﬁtting
with these more general functional forms is called nonlinear fon
obvious reasons. The simplex algorithm of Ch. 8 §2.3 below is an
example of a nonlinear ﬁtting procedure.

 

We are now going to write programs to ﬁt both linear and non—
linear functions to data. The ﬁrst and conceptually simplest oﬂ
these is the Fourier transform, namely representing a function as
a sum of sines and cosines.

§§1 Fast Fourier transform
What is a Fourier transform? Suppose we have a function thati
is periodic on the interval 0 s x 5 2m

f(x + 2:) = to);

Then under fairly general conditions the function can be ex~
pressed in the form

f(x) = a0 + E (a, cos(n.r) + b, 5111011)) (26)

11-1

Another way to write Eq. 26 is

f(x) -:§c.ew. (27)

In either way of writing, the c,, are called Fourier coefficients of
the function f(x). booking, e.g., at Eq. 27, we see that the or-
thogonality of the sinusoidal functions leads to the expression

1 _ .
c..=gf3'f(x)e "“411. (28)
Evaluatin£ Eq. 28 numerically requires —for given n- at least
2n pomts Naively, for each n = 0 to N-l we have to do a sum
2N

~ 2 f1. e—mk/N

k-l

C11

which means carrying out 2N2 complex multiplications.

The fast Fourier transform (FFT) was discovered by Runge and
Konig, rediscovered by Danielzslon and Lanaos and m—redis-
covered by Cooley and Tukeyn. The FFI‘ algorithm can be
expressed as three steps.

0 Discretize the interval, Le. evaluate f(x) only for
k
27: N , 0 S x S N 1.
Call f(x.,) = f.,.
0 Express the Fourier coefﬁcients as
N —1
= 2 r. (2.....- ”". (29)
11-0
0 With w, = e"2"“"'/N , Eq. 29 is an N-l’st degree polynomial in
w, . We evaluate the polynomial using a fast algorithm.

 

20. to prevent aliasing.
21. See, e.g., DE. Knuth, Thain of Computerhogmnmting v. 2 (Addison-Wesley Publishing Co.,
Reading, MA, 1981) p. 642.

OJtlthNohlotm—Alrlgﬂamennd.

Chapter 0 - More Programming Examples Scientific FORD-Ir

To evaluate rapidly the polynomial

N-l
c. = P. (w.) a 2 1.011.)"

k-O
we divide it into two polynomials of order N/Z, dividing each of]
those 1n two, etc. This procedure' IS efﬁcient only for N= 2 ,with,
v an integer, so this IS the case we attack.

How does dividing a polynomial in two help us? If we segregate:
the odd from the even powers, we have, symbolically,

Paw) = EN/2(W2) + w omw’) . (30)

 

Suppose the time to evaluate PN(w) is TN. Then, clearly,

..4._-..~.<-Aanv- .. ‘1

TN = A '1' ”w; (31)

where .1 is the time to segregate the coefﬁcients into odd and even.
plus the time for 2 multiplications and a division. The solution of’
Eq. 31is 1(N-1). That is, it takes 0(N) time to evaluate a poly-
nomial.

However, the discreteness of the Fourier transform helps us here.
The reason is this: to evaluate the transform, we have to evaluate

PN (W) for N values of w, . But wﬁ takes on only N/Z values as 11
takes on N values. Thus to evaluate the Fourier transform for all
N values of n, we can evaluate the two polynomials of order NB
for half as many points.

Suppose we evaluated the polynomials the old-fashioned way: it
would take 2(N/2)= -N multiplications to do both, but we need do
this only N/Z times, and N more (to combine them) so we have
N 2/2 + N rather than N2. We have gained a factor 2. Obviously 1t~‘
pays to repeat the procedure, dividing each of the sub-polyno~
mials in two again, until only monomials are left.

Symbolically, the number of multiplications needed to evaluate,
a polynomial for N (discrete) values of w is s

1,. = N1 + 21",, (32) §

 

MO-MPWEW 107

whose solution is

1,, - AN 103,01) . (33)

Although the FFT algorithm can be programmed recursively, it
almost never is. "lb see why, imagine how the coefﬁcients would
be re-shufﬂed by Eq. 30: we work out the case for 16 coefﬁcients,
exhibiting them in Table 8-1 below, writing only the indices:

Table 8-1 Blt-reverad tor reordering discrete data

 

Stan Stqﬁ Stop2 SW3 Bho Bhg
0 0 0 0 (XXX) (XXX)
1 2 4 6 (XXII “XX!
2 4 6 4 N10 0100
3 6 12 12 (D11 1100
4 B 2 2 0100 NIO
5 10 6 10 0101 1010
6 12 10 6 0110 0110
7 14 14 14 0111 1110
0 1 1 1 1000 (”01
9 3 5 9 1001 1001
10 5 9 5 1010 0101
11 7 13 13 1011 1101
12 9 3 3 1100 (1)11
13 11 7 11 1101 1011
14 13 11 7 1110 0111
15 15 15 15 1111 1111

 

 

The crucial columns are “Start” and “Step 3". Unfortunately, they
are written in decimal notation, which conceals a fact that be-
comes glaringly obvious in binary notation. So we re-write them
in binary in the columns Bino and Bin, —and see that the ﬁnal
order can be obtained from the initial order simply by reversing
the order of the bits, from left to right!

standard FORTRAN program for complex FFI‘ is shown below.
e shall simply translate the FORTRAN into FORTH as ex-
peditiously as possible, using some of FOR'IH's simpliﬁcations.

ne such improvement is a word to reverse the bits in a given
integer. Note how clumsily this was done in the FORTRAN

OJtlthNoUotm-Aldﬂttamorwd.

188

sumounre Foum (DATA. NN. ISIGN)
NunHueudunnnmdﬁl*nmbquau

ISBN EETEFNI'ESWl-EH'EHTl-EFFT
ISFWAHDORBAOKWAH)

0000000

DATA Is TT-E ((1)111le ARRAY GDISCRETE N’U‘I’
CDMPLEX w, WP. TEMP, DATA(N)
DEAL'B TFETA
J =0
00 11 |= 0,N-1
IF (J.GT.I) THEN
TEMP= DATA“)
DATA(J) =DATA(I)
DATAtI) =TEMP
ENDIF
M: NR
1 IF ((M.GE1)AND.(J.GT.M)) THEN
J=J—M
M= W2
60 T0 1
ENDtF
J = J + M
11 CONTINUE

\boainmmnu

\endbitrwerul

Chapter 3 - More Programming Examples

 

Scientiﬁc FORTH

WAX-1 \mmm
2 F(MGT.MIMT|-EN
STE-m \Mumm

THEM-ammmmm
WP-CEXPO'HEI’A)
w- Window)
0013 M- 1.1mm
no 121- M.N.ISTEP
J=1+MMAX
TEMP=DATA(J)'W
mm» =DATA(l)-TEAP
mm» = 0mm) new
12 oomwue \end lnnerloop
c

\mbov
\lmerloop
\utII-Ntlrnu

W=W‘WP \tng m

C

13 CONTINUE
MMAX=ISTEP
GOT02
BJDIF

FETUFN

\endoubrloop

\endMeleon—Unazoeudon

program. Since practically every microprocessor permits right-
shifting a register one bit at a time and feeding the overﬂow into
another register from the right, 3.11 can be programmed easily in
machine code for speed. Our fast bit-reversal procedure 8.11 may
be represented pictorially as in Fig. 8-5 below.

 

Initial number: Reg A
:1001101110100011-1

    
 

 

 

Stepv
III a

 

Step 1

Bit-reversed number: Reg 3

1100010111011001

Bit overﬂow

”1W1“1“6°’ii1“6‘1o°66‘i ‘

'#AWA“V’»Y~V¢WIMWW“‘<%MVWW ‘.

Inltlel number: Reg B

 

 

 

 

 

Fig. 8—5 Pictorial representation of bitmrsel

DWI—WWW 1”

Bit-reversal can be accomplished in high-level FORTH via

:B.R (n--n') \reverseorderoibits
OSWAP (--On) \eetupstack
N.BITSODO

DUP1AND \pickout1'sbit

ROT2'+ \leftshift1,edd1'sbit

SWAP2/ \rightoshittn
LOOPDROP;

I Note: N.BITS is a VAR, previously set to v = log2(N)

We will use 3.8 to re-order the actual data array (even though
this is slightly more time-consuming than setting up a list of
scrambled pointers. leaving the data alone). We forego indirec-
tion for two reasons: ﬁrst, we have to divide by N (N steps) when
inverse-transforming, so we might as well combine this with
bit-reversal; second, there are N steps in rearranging and dividing
by N the input vector, whereas the FFT itself takes Nlog2(N)
steps, Le. the execution time for the preliminary N steps is unim-
portant.

Now, how do we go about evaluating the sub-polynomials to get
the answer? First, let us write the polynomials (for our case
N = 16) corresponding to taking the (bit-reversed) addresses off
the stack in succession, as in Fig. 8-6 below.

 

 

:12; i 5233* w... + ...
w5(t,, + M 1,3)
30‘ + 5f” : >co + we,
fa + 114 4
Min + M 1,0; ”2“” + w 8")
w‘(r. + w’ in)
M0,, + M r. )1

>w‘(b, + wing)
w‘(a1 + w‘as)

) w°(bo + w’bz)

w°(a° + w‘a.)

 

 

 

J

 

 

Flgjel’heorderolevalwtlnqe 16m. FFT

cmvmrm-umm.

190 mus—Mmrrogmmnmanm SclentIﬂcFORTr/s

 
  

We see that w? (for N=16) has only two possible values, :1.

Thus we must evaluate not 16 x 8 terms like 1’, + w8 fm , but only
2X8. Similarly, we do not need to evaluate 16X4 terms of form
f, + 1941',“ , but only 4X4, since there are only 4 possible values
of w:. Thus the total number of multiplications is

=5ﬁﬁeﬁﬁxwiﬁ

2x8 + 4x4 + 8x2 + 16x1 = 64 a16logz16,

is!

as advertised. This is far fewer than 16X16 =256, and the ratio

improves with N — for example a 1024 point FFT is 100 times
faster than a slow FT.

We list the FFI‘ program on page 191 below. Since }FFT trans '
forms a one-dimensional array we retain the curly braces notation I
introduced in Ch. 5. We want to say something like

new.

V{ n.pts FORWARD }FFT

where V{ is the name of the (complex) array to be transformed,
n.pts (a power of 2) is the size of the array, and the ﬂag-setting ; '
words FORWARD or INVERSE determine whether we are
taking a PET or inverting one.

Now we test the program. Table 8—2 on page 192 contains the L"

weekly stock prices of IBM stock, for the year 1983 (the 52
values have been made complex numbers by adding 01', and the
table padded out to 64 entries (the nearest power of 2) with
complex zeros)22 .T'he ﬁrst two entries (2,64) are the type and
length of the ﬁle. (The ﬁle reads from left to right.)

We FFl‘ Table 8- 2 using the phrase IBM{ 64 DIRECT }FFT. The
power spectrum of the resulting FFI‘ (Table 8-3) is shown in
Fig. 8- 7 on page 192 below.

 

22. This example is taken from the article “FORTH and the Fast Fourier Transform" by Joe
Barnhart, Dr. Dabb's Journal, September 1984, p. 34.

 

OJtllnnVNoble1m—Nldghuruorvod.

 

”FORTH

\WMMW
Kw:mmmmrmnm
.rAaxm
\mmmammww

MCs o-rmmooowrsx)

I'D THY O-‘HHDIDMATMHBFD
Mom o-rinvonaorm)
norm o-‘NFLOAD‘I'Ml

\IMM

m
\‘I..---------.---...-...-I
(mm

: oooeeaememanoooe

: moan-4.21111) oswAP (momma
3am NC»
was SH! MPH) 9V» REPEAT:

:CIN N$>FCJF:

15W 1150mm

; F ONOSWAP UN CPSNAP TIEN:
(era-mm

\u-ncu-------------.--nun-u

\byblmml

PM!!!

'2“ (mm) \memdbh
- new» (-—0n) \ltipdnk

1' NSTSOWMIADD \MMI'IUI

mew \Mmlﬂmi‘eﬂ
MP2] \ﬂ-m
' mm;

11521133501511:
Mono 13.11 ISLR
1 LRI<IOT (LR>-17)
“unmanned WEE
1(1A}o11.1(1}oitniat

(“Wﬂm

01.1.0-”me

 

191

\-.--...--.--...-.--------.
\mdnw
01204 ”10.160113”.
IFW.1W.3FLD,
1WJMJFWJWW
(Chop-H 1H2)

:Tl-ETA F-HMSoFF/ m M;

mmwwmmoaw
:mmo mmseommocnc-i;

:reww (arm-4')» 0170 c-;
OVARISTEP

zoomwov
00 m1 + 19111
cm 111111001- 0' 1(1) eat
WHO-<1» 1(1)01L1(111}GIL
1819 +L00";

:}H-‘T (uknn) ISN ISM

”SW

NLGZISMBTS

FNT

BITRBIERSE

BEGN
NM >

was
NTJ'FIGMMAXTISISTEP
W000

NImDNELW WWW

w
ISTEPISMMAX

RE’EATCPWP:

:mnooormamcmscal. F. w;
\mmdFF-‘T \mddmm
\-I-I----.---.----3-----.I-
\Inmeb

“WWMMAYM
:NTA Aﬂ'BMBfmFILCImE-IPUT:
NI'TA
MMWCI'WFT

\dﬂd-nmeb

\-.--m-u-u-n-u-n-u-n-u-u-u-

ow do we know the FFI‘ program actually worked? The
simplest method is to inverse-transform the transform, and

compare with the input ﬁle. The FFI' and inverse FFT are given.

respectively, in Tables 8-3 and 8-4 on page 193 below. Within
roundoff error, Table 8-4 agrees with Table 8-2 on page 192.

emvmuueea-Almw.

Chapter 8 - More Programming Examples Scienﬁfic FORTH

Table 6-2 Weekly IBM common stock prices, 1983

 

2 84

5.63 0.0 9.13 0.0 91.- 0.0 07.5 0.0
97.38 0.0 5.38 0.0 case 0.0 mm 0.0
11125 0.0 1&75 0.0 ﬂ.ﬂ 0.0 1&13 0.0
101$! 0.0 mas 0.0 110.13 0.0 117.5 0.0
117.00 0.0 117.63 0.0 116.3 0.0 110.5 0.0
113.11) 0.0 mm 0.0 114.5 0.0 121.13 0.0
123m 0.0 121.“) 0.0 121.50 0.0 15.13 0.0
124.38 0.0 15.38 0.0 119.75 0.0 118.50 0.0
15.5) 0.0 117.83 0.0 119.75 0.0 12.5 0.0
15.13 0.0 15.5 0.0 15.38 0.0 1325 0.0
131.75 0.0 127.00 0.0 15.1.!) 0.0 1&5 0.0
15.88 0.0 1235) 0.0 121.00 0.0 117.88 0.0
12.25 0.0 120.88 0.0 15.5 0.0 122.00 0.0

0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0

 

 

 

 

 

6000
5400
4800
4200
3600
r 3000
- 2400
- 1800
- 1200
. 600

L4._i

AALALA

       

 

     

8 43,

0.0 5.4 10.8 16.2 21.6 27.0 32.4 37. 2 48.6 54.0

 

 

Fig. 8-7 Power spectrum of FFT of 1983 IBM prices (from Table 63)

i

 

 

MNFFTdiBMweekiyetockpricu, 100:1

 

 

 

 

 

 

 

0 man 0m 02 01.11.00.113!!!» 107.m.1s1m40 40 72mm 10.171040
1.1.100- mm as amum 1727040402 01001004 40 nmmam
207400417 m 34 unnunm 10.134201 117m 01 140.1040104107007
0 011000114 54.40010 3 nmm 1011002031 71.4224u s1 ummmm
4 02741342 17701110 a ammou 2007” 24.00.74 02 40.01m14740120
3 12021042011301” 37 40102017314041442 21104070107340“ 0:1 40.470211042121100
um 9001013 3 1010021an mum 02.311140 04 00270041331000
700020402 name a swam 2044172011077001 00 10110401411900
0 1924a 200.01” 40 10771701044100" 2410771731 34.411177 :0 11124342001000
0 10110401 12015400 41 44.17me1107731 200073002 am 57 00.012040222027100
10012700414111.3103 42 mama-0201:1040 20102011210211.2001 00 .170m000013
1140.47sa1 0.4212000 4:1 10407913154041 27mm": 14.041442 00 13210120000304
‘ 1240mm 147.4513 44 07.301104242501174 20:0.700000 00.411000 :1 02740042177011 10
13045024001521202 40 11003017142402 2001700004 25.042037 01 30000314004010
1414010401 04.107037 40 «imam-11700700 3000170007 02:14am a 41742041740110.0422
mammam 47 47.114040201001004 31 13.411000744057210 0:1 Jason-0am
Table 8-4 Reconstructed IBM prices (inverse FFT)
o 000:!) 00000 :12 12250 0.11110 10117.00-000000000 40 1225 000000000
1 00.120 000100705 30 11702-110000245 17 117.02-000000510 40 12007 0011100132
2 04020 0000011023 31 110.75 000000140 10 11s.so-.000000110 so 12300000000002
3 07070 1100000227 :15 12224000000070 10110.02000001375 51 1213-0000000“
4 07000 0000000011 :10 1201000100005 20111000000010" :2 .000012004-mmo1070
5 00.370411100011302 37 12002 0000007110 21 114.00 000000075 00 -.000001277-0000014:14
e m m1a7 a 1203 001000051 22 1142; 000000070 54 -mcmzm-ma:o1224
7 1003 000002150 :10 1325-000101001 23 121.12 000000017 55 -.00m05000-.000000015
0 10254110000000 4o 131.70-000000000 24 1Z1000000001m 50 00000010120011an
0 10070 000000700 41 12700-001000073 25 12100 0110001130 57 -.000002005-000001000
10 0030 -.0m0m271 42 120.00 000000401 20 121.50-01mo1400 50 4100010040 100001300
11 10212-01mmra 40 12224-000001011 27 120.12 003012022 so -.000m5020-m0001711
12 10102 1110000010 44 1307 0000000111 20 124.37 .000000027 :1 -.m0000010-.mm00m7
13 100 001000043 45 121.50 mm 20 120.30 000001201 01 -.0000_:1-000001500
14 110.1:1-m1010 40 121.00 000001007 :10 110.75-001000010 02 -.000000121 000000200
115 nus-0.0.7 47 11707 00001104 31 11040 000000573 03 -.0000m713 000010000

 

 

 

§§2 Gram polynomials
Gram polynomials are useful in ﬁtting data by the linear least-
squares method. The usual method is based on the following
question: What is the “best" polynomial,

N
P1111) = 207. r". (34)

omvmunm-umm.

Cl'teptere—MoreProgrammingExamplee Sclendiic FORTH ,

(of order N) that I can use to ﬁt some set of M pairs of data points, 1

1

{1"}, k=0, 1, ,M—1 1
k

(with M > N) where f(x) is measured at M distinct values of the
independent variable x ?

The usual answer, found by Gauss, is to minimize the squares of
the deviations (at the points xk ) of the ﬁtting function PN (x) from
the data — possibly weighted by the uncertainties of the data That
is, we want to minimize the statistic

2 M—1 N
X = 2 (ft _ 2 1’11in
k=0

2 1
“=0 ) 2 (35)

with repect to the N + 1 parameters yl| .
From the differential calculus we know that a function’g ﬁrst
derivative vanishes at a minimum, hence we differentiate x with

respect to each yn independently, and set the results equal to
zero. This yields N + 1 linear equations in N + 1 unknowns:

2 Anm 7m =ﬂn 1 "=011, , N (36)

where (the symbol 9 means “is deﬁned by”)

A M_1 71+m 1
Anm = 20 (x11 ; (37a)
' k
and
A ”'1 1
ﬁn = ongfk— (37b)

In Chapter 9 we develop methods for solving linear equations.
Unfortunately, they cannot be applied to Eq. 36 for N 2 9 be-
cause the matrixAm approximates a Hilbert matrix,

 

const.
H“ - n+m+1 ’

MI-MWW 195

a particularly virulent example of an exponentially ill-
eondltlonetl matrlx. That is. the roundofl' error in solving 36
grows exponentially with N, and is generally unacceptable We

can avoid roundolf problems by expanding' in polynomials rather
than monomials:

2 g 2 i
z E. (1. lg) 7.12.0.1) of 138)
The matrix then becomes
14— 1
=20 pn(xk)pm(xk)_ of (39a)
and the inhomogeneous term is now
M-1 1
ﬁn = 2 17110:)ka (39b)
k-o 1:

5 there any choice of the polynomials p,,(x) that will eliminate
roundoﬁ'? The best kinds of linear equations are those with
nearly diagonal matrices. We note the sum in Eq. 39a is nearly an
integral, if M is large. If we choose the polynomials so they are
orthogonal with respect to the weight function
W(x) =ﬁ01x. - x) 0(x — ..-),
k

where

0, <0
0(x)={1:20

thenA“, will be nearly diagonal, and well-conditioned.

