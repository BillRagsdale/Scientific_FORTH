&mmmm waLMwmmmmm

Programming in FORTH

Comm!

§1 The structure of FORTH
§2 Extending the dictionary

§3 Stacks and reverse Polish notation (RPN)
§§1 Manipulating the parameter stack

552 The return stack and its uses

54 Fetching and storing
§5 Arithmetic operations
§6 Comparing and testing
§7 Looping and structured programming
58 The pearl of FORTH
§§1 Dummy words
552 Deﬁning ”deﬁning" words
§§3 Run-time vs. compile-time actions
§§4 Advanced methods of controlling the compiler
§9 Strings
§10 FORTH programming style
§§1 Structure
§§2 “Top-down” design
§§3 information hiding
§§4 Documenting and commenting FORTH code
§§5 Safety

NNNN—bddg
#5w-‘0‘IU‘Q

8888

t$8888828

11

12

Chapter 2 - Programming In FORTH Sclentlﬂc Forth

This chapter brieﬂy reviews the main ideas of FORTH to let the

reader understand the program fragments and subroutines
that comprise the meat of this book. We make no pretense to
complete coverage of standard FORTH programming methods.
Chapter 2 is not a programmer’s manual!

Suppose the reader is stimulated to try FORTH - how can he
proceed? Several excellent FORTH texts and references are
available: Starting FORTHl and Thinking FORTH2 by Leo
Brodie; and FORTH: a Text and Reference3 by M.Kelly and
N.Spies. I strongly recommend reading FTRor SF (or both)
before trying to use the ideas from this book on a FORTH system.
(Or at least read one concurrently.)

he (commercial) GEnie information network maintains a ses-
sion devoted to FORTH under the aegis of the Forth Interest
Group (FIG).

FIG publishes a journal Forth Dimensions whose object is the
exchange of programming ideas and clever tricks.

The Association for Computing Machinery (11 West 42nd St.,
New York, NY 10036) maintains a Special Interest Group on
FORTH (SIGForth).

The Institute for Applied FORTH Research (Rochester, NY)
publishes the refereed Journal of FORTH Application and Re-
search, that serves as a vehicle for more scholarly and theoretical
papers dealing with FORTH.

Finally, an attempt to codify and standardize FORTH is under-
way, so by the time this book appears the ﬁrst draft of an ANS
FORTH and extensions may exist.

 

PP!“

L. Brodie, Starring FORTH, 2nd ed. (Prentice-Hall, NJ, 1986), referred to hereafter as SF.
L. Brodie, Thinking FORTH (Prentice-Hall, NJ 1984), referred to hereafter as Tl".
M. Kelly and N. Spies, FOR TH: a Tea and Reference (Prentice-Hall, NJ , 1986), referred to

hereafter as FTR.

mm Ml-Whm 13

It TheatmctmootFORTl-t

e "atom" of FORTH is sword — a previously-deﬁned opera-
tion (deﬁned in terms of machine code or other, previously-
dcﬁned words) whose definition is stored in a series of linked lists
called the dictionary. The FORTH operating system is an endless
loop (outer interpreter) that reads the console and interprets the
input stream, consulting the dictionary as necessary. If the stream
contains a word in the dictionary the interpreter immediately
executes that word.

 

 

Yes
EN? l word? lYilexscure l

_J
No l Interpret ] l

iii—J | number? Y“ NUMBER ]

 

 

 

 

 

 

 

 

 

 

Fig. 2-1 Overview of FORTH outer interpreter

In general, because FORTH is interpretive as well as compiled,
the best way to study something new is in front of a computer
running FORTH. Therefore we explain with illustrations, expect-
ing the reader to try them out.

In what follows, anything the user types in will be set in Helvetica,
such as DECIMAL below.

Machine responses appear in ordinary type.
We now give a trivial illustration:

DECIMAL <cr> ok

 

Suewasive words in the input stream are separated from each other by blank spaces. ASCII
”at, the standard FORTH «limiter.

OJtlthNotk—Alriu'ureaerved.

Chapter 2 - Programming in FORTH Scientific Forth

Ham:

0 < or > means “the user pushes the ENTER or .- button".

0 0k is what FORTH says in response to an input line, if nothing
has gone wrong.

a DECIMAL is an instruction to use base 10 arithmetic. FORTH
will use any base on tell it, within reason, but usually only
DECIMAL and H (hexadecimal) are predeﬁned.

When the outer interpreter (see Fig. 2.1 on p. 13) encounters text
with no dictionary entry, it tries to interpret it as a NUMBER.

It places the number in a special memory location called “the top
of the stack” (T05)5

217 +. <cr> 190k

3919.5:

0 FORTH interprets 2 and 17 as numbers, and pushes them onto
the stack. “ + ” is a word and so is “.” so they are EXECUTEd.

o + adds 2 to 17 and leaves 19 on the stack.

a The word . (called “cmit”) removes 19 from the stack and
displays it on the screen.
We might also have said6
HEX 0A14*. <cr> C8 ok

(Do you understand this? Hint: HEX stands for “switch to
hexadecimal arithmetic”)

 

We will explain about the stack in §2.3.
since FORTH uses words, when we enter an input line we say the corresponding phrase.

If the incoming text can neither be located in the dictionary nor
interpreted as a number, FORTH issues an error message.

52 Extending the dictionary

The compiler is one of FORTl-I’s most endearing features. It is

elegant, simple, and mostly written in FORTH. Although the
technical details of the FORTH compiler are generally more
interesting to systems developers than to scientists, its com-
ponents can often be used to solve programming problems. When
this is the case, we necessarily discuss details of the compiler. In
this section we discuss how the compiler extends the dictionary.
In §2§§8 below we examine the parts of the compiler in greater
detail.

FORTH has special words that allow the creation of new diction-
ary entries, i.e., new words. The most important are “ : " (“start a
new deﬁnition") and “ ; ” (“end the new definition").

Consider the phrase

: NEW-WORD WORD1 17 WORDZ . . . WORDn ; ok

The initial “ : " is EXECUTEd because it is already in the diction-
ary. Upon execution, “ : " does the following:

o Creates a new dictionary entry, NEW-WORD, and switches
from interpret- to compile mode.

0 In compile mode, the interpreter looks up words and — rather
than executin them — installs ointers to their code. If the text
is a number ( 7 above), FOR builds the literal number into
the dictionary space allotted for NEW-WORD.

o The action of NEW-WORD will be to EXECUTE sequentially
the previously-defined words WORD1,WORDZ, ...WORDn,
placing any built-in numbers on the stack as they occur.

16

Chapter 2 - Programming in FORTH Scientiﬁc Forth

o The FORTH co aililerpo EXECUTEs the last word “ ; " of the
deﬁnition, by inst dc (to return control to the next outer
level of the mterpretegr ) then switching back from compile to
interpret mode. Most other languages treat tokens like “ ; " as
ﬂags (in the input stream}= that triger actions rather than
act1ons in their own right ORTH lets components execute
themselves.

In FORTH all subroutines are words that are invoked when they
are named. No explicit CALL or GOSUB statement is required.

The above deﬁnition of NEW-WORD is extremely structured
compared with FORTRAN or BASIC. Its deﬁnition is just a series
of subroutine calls.

e now illustrate how to deﬁne and use a new word using the

previously deﬁned words “ : ”and “ ; ”. Enter the phrase (this
new word a + expects 3 numbers, a, b, and c on the stack)

: * + * + ; ok
Mn:
0 at multiplies b with c, leaving b*C.
o + then adds b*c to a, leaving a + b*c behind. .
Now we actually try out a + :
DECIMAL 56 7 *+. 47 ok
N91932:
o The period . is not a typo, it EMlTs the result.
a FORTH’s response to a b c e + . is a + b‘c ok.

 

7.

This level could be either the outer interpreter or a word that invokes NEW-WORD .

scmm

Glenna-Pmmonm 17

What if we were to enter 0 + with nothing on the stack ? Let's try

it and see ( .3 is a word that displays the stack without changing
its contents):

.5 empty stack ok

‘ + empty stack ok

Suppose you entered the input line

HEXSS7t+.<cr>mok

What would you expect the response xxx to be?

53 Stacks and reverse Polish notation (RPN)

e now discuss the stack and the “reverse Polish” or “postﬁx”

arithmetic based on it. (Anyone who has used one of the
Hewlett-Packard calculators should already be familiar with the
basic concepts.)

A Polish mathematician (J .Lukasewcleia) showed that numeri-
cal calculations require an irreducible minimum of elementary
operations (fetching and storing numbers as well as addition,
subtraction, multiplication and division). The minimum is ob-
tained when the calculation is organized by “stack" arithmetic.

Thus virtually all central processors (CPU’s) intended for arith-
metic operations are designed around stacks. FORTH makes
efﬁcient use of CPU's by reflecting this underlying stack architec-
ture in its syntax, rather than translating algebraic-looking pro-
gram statements (“inﬁx” notation) into RPN-based machine
operations as FORTRAN, BASIC, C and Pascal do.

OMVNohio-Mnghtareurved.

Chapter 2 — Programming in FORTH Scientiﬁc Forth

But what is a stack? As the name implies, a stack is the machine
analog of a pile of cards with numbers written on them. Numbers
are always added to, and removed from, the top of the pile. (That
is, a stack resembles a job where layoffs follow seniority: last in,
ﬁrst out.) Thus, the FORTH input line

DECIMAL 2 5 73 -16 0k

followed by the line

+-*.yyyok

leaves the stack in the successive states shown in Table 2-1 below

 

 

 

 

Cell # Initial Ops- + _ * _
0 ~16 ‘ Result 57

2 5 ’ 2

3 2 ‘

 

 

Table 2-1 Picture of the stack during operaa'ons

We usually employ zero-based relative numbering in FORTH
data structures —stacks, arrays, tables, etc.- so TOS (“top of
stac ”) is given relative #0, NOS (“next on stack”) #1, etc.

(I H

The operation . (“emit") displays -104 to the screen, leaving
the stack empty. That is, yyy above is -104.

mm own-warm 10

Ill Whom”
FORTH system incorporate (at least) two stacks: the

parameter stack which we now discuss, and the return stack
which we defer to 92.3.2.

In order to use a stack-based system, we must be able to put
numbers on the stack, remove them, and rearrange their order.
FORTH includes standard words for this purpose.

Putting numbers on the stack is easy: one simply types the number
(or it appears in the deﬁnition of a FORTH word).

To remove a number we have the word DROP that drops the
number from TOS and moves up all the other numbers.

Tb exchange the top 2 numbers we have .

DUP duplicates the TOS into NOS, pushing down all the other
numbers.

ROT rotates the top 3 numbers.

Cell # initial OPS-r DROP SWAP HOT DUP

-16 Result 73

 

Table 2-2 Stack manipulation operators

emvNouo—Mﬂomw-

20

Chapter 2 — Programming In FORTH Scientiﬁc Forth

These actions are shown on page 19 above in Thble 2—2 (we show
what each word does to the initial stack).

In addition the words OVER, UNDER, PICK and ROLL act as
shown in Table 2-3 below (note PICK and ROLL must be

 

 

Cell # initial 0P8-' OVER UNDER 4 PICK 4 ROLL
o -16 Result 73 -16

1 73 —» -1e 73

2 5 73 ~16

3 2' g 5 . _ 5

4 V 2 ,_ 2

 

 

 

Table 2-3 More stack manipulation operators

preceded by an integer that says where on the stack an element
gets PlCKed or ROLLed).

Clearly, 1 PICK is the same as DUP, 2 PICK is a synonym for
OVER, 2 ROLL means SWAP, and 3 ROLL means ROT.

As Brodie has noted (TF), it is rarely advisable to have aword use
a stack so deep that PICK or ROLL is needed. It is generally better
to keep word deﬁnitions short, using only a small number of
arguments on the stack and consuming them to the extent pos-
sible. On the other hand, HOT and its opposite, -ROT8, are often
useful.

 

8.

deﬁned as : -ROT HOT HOT ;

Mz-PWHFORTH 21

u: Thoretumatacttanditaueaa

We have remarked above in §2§§2 that compilation establishes

links from the calling word to the previously- deﬁned word
being invoked. Part of the linkage mechanism ——during actual
execution- is the return stack (rstack): the address of the next
word to be invoked after the currently executing word is placed
on the rstack, so that when the current word is done, the system
jumps to the next word. Although it might seem logical to call the
address on the rstack the next address, it is actually called the
return address for historical reasons.

In addition to serving as a reservoir of return addresses (since
words can be nested, the return addresses need a stack to be put
on) the rstack is where the limits of a DO LOOP construct are
placedg.

The user can also store/retrieve to/from the rstack This is an

example of using a component for a purpose other than the
one it was designed for. Such use is not encouraged by every
FORTH text, needless to say, since it introduces the spice of
danger. To store to the rstack we say > R, and to retrieve we say
R > . DUP > R is a speedup of the phrase DUP > R . The words
D>R DR> , for maving double-length integers, also exist on
many systems. The word R@ copies the top of the rstack to the
TOS.

The danger is this: anything put on the rstack during a word’s
execution must be removed before the word terminates. If the
> R and the R > do not balance, then a wrong next address will
be jumped to and EXECUTEd. Since this could be the address
of data, and since it is being interpreted as machine instructions,
the results will be always unpredictable, but seldom amusing.

Why would we want to use the rstack for storage when we have

a perfectly good parameter stack to play with? Sometimes it
becomes simply impossible to read code that performs complex
gymnastics on the parameter stack, even though FORTH permits

such gymnastics.

 

9.

Wediacnasloopingin§27belom

22 Chapter 2 - Programming in FORTH Sclentlﬂc Form Aw

Consider a problem — say, drawing a line on a bit- mapped graphics
output device from (x,y) to (x’,y’) — that requires 4 arguments. We
have to turn on the appropriate pixels in the memory area repre-
senting the display, in the ranges from the origin to the end coor-
dinates of the line. Suppose we want to work with x and y ﬁrst, but
they are 3rd and 4th on the stack. So we have to ROLL or PICK to
get them to TOS where they can be worked with conveniently. We
probably need them again, so we use .

4PICK 4PICK (--xyx'y'xy)

 

Now 6 arguments are on the stack! See what I mean? A better
way stores temporarily the arguments x’ and y', leaving only 2 on
the stack. If we need to duplicate them, we can do it with an
already existing word, DDUP.

Complex stack manipulations can be avoided by deﬁning VARI—
ABLEs —narned locations— to store numbers. Since FORTH,
variables are typically global — any word can access them — their ,
use can lead to unfortunate and unexpected interactions among 5"
parts of a large program. Variables should be used sparingly.

 

While FORTH permits us to make variables local to the sub- if
routines that use themlo, for many purposes the rstack can ad-
vantageously replace local variables: i

‘l

o The rstack already exists, so it need not be deﬁned anew. i

a When the numbers placed on it are removed, the rstack
shrinks, thereby reclaiming some memory.

Suppose, in the previous example, we had put x’ and y’ on the
rstack via the phrase

>R >R DDUP.

Then we could duplicate and access x and y with no trouble.

 

10. See FTR, p. 3253 for a description of beheading - a process to make variables local to a small \
set of subroutines. Another technique is to embed variables within a data structure so they can-
not be referenccd inadvertently. Chapters 2§8§§3-2, 3§5§§2, 5§1§§2 and 11§2 offer examples. It

 

Mz-Pmmnm 23

mm: since the rstack is a critical component of the
execution mechanism, we mess with it at our peril. If we want to
use it, we must clean up when we are done, so it is in the same
state as when we found it. A word that places a number on the
rstack must get it off again — using R> or RDROP — before
exiting that word“. Similarly, since no LOOP uses the rstack
also, for each >R in such a loop (after DO) there must be a
corresponding R > or RDROP (before LOOP is reached).
Otherwise the results will be unpredictable and probably will crash
the system.

54 Fetching and storing

Ordinary (16-bit) numbers are fetched from memory to the

stack by “ @ " (“fetch"), and stored by “ I ” (“store”). The
word @ expects an address on the stack and replaces that address
by its contents using, e.g., the phrase X @ . The word “ I”
expects a number (NOS) and an address (T OS) to store it in, and
places the number in the memory location referred to by the
address, consuming both arguments in the process, as in the
phrase 32 X l

Double length (32-bit) numbers can similarly be fetched and
stored, by D@ and DI . (FORTH systems designed for the newer
32-bit machines sometimes use a 32-bit-wide stack and may not
distinguish between single- and double-length integers.)

Positive numbers smaller than 255 can be placed in single bytes
of memory using C@ and CI . This is convenient for operations
with strings of ASCII text, for example screen, ﬁle and keyboard
110.

In Chapters 3, 4, S and 7 we shall extend the lexicon of @ and l
words to include floating point and complex numbers.

 

ll. Whahandywaytoeidtfromawordbeforereachingtheﬁnal“;".See'l‘l‘.

OthnVNobIe-Alrigiuroaarved.

24 Chapter 2 - Programming In FORTH Scientiﬁc Form

§5 Arlthmetlc operations

The 1979 or 1983 standards, not to mention the forthcoming

ANSII standard, require that a conforming FORTH system
contain a certain minimum set of predefined words. These consist
of arithmetic operators + — * / MOD [MOD '/ for (usually)
16-bit signed-integer (-32767 to +32767) arithmetic, and
equivalents for unsigned (0 to 65535), double-length and mixed-
mode (16- mixed with 32-bit) arithmetic. The list will be found in
the glossary accompanying your system, as well as in SF and F111.

§6 Comparing and testlng

n addition to arithmetic, FORTH lets us compare numbers on
the stack, using relational operators > < = .These operators
work as follows: the phrase
2 3 > < cr > ok

will leave 0 (“false”) on the stack, because 2 (N05) is not greater
than 3 (T OS). Conversely, the phrase

23 < <cr> ok

will leave-1 (“true”) because 2 is less than 3. Relational operators
typically consume their arguments and leave a “ﬂag” to show what
happened1.'Ihose listed so far work with signed 16-bit1ntegers.
The operator U < tests unsigned 16-bit integers (0—65535).

FORTH offers unary relational operators 0 = 0 > and 0 < that
determine whether the TOS contains a (signed) 16-bit integer
that is 0, positive or negative. Most FORTHs offer equivalent
relational operators for use with double-length integers.

The relational words are used for branching and control. The
usual form is

:MAYBE 0> IF WORDl WORDZ
WORDn THEN ;

 

12. The original FORTH-79 used + 1 for “true”, 0 for “false"; many newer system that mostly fol-
low FORTH-79 use -1 for “true". PIS/FORTH is one such. Both POINT-[.83 and ANSII
FORTH require -1 for “true", 0 for “false".

arms-Warm 25

The word MAYBE expects a number on the stack, and executes
the words between IF and THEN if the number on the stack is
positive, but not otherwise. If the number initially on the stack
were negative or zero, MAYBE would do nothing.

An alternate form including ELSE allows two mutually exclusive
actions:

:CHOOSE 0> IF WORD1 . . . WOHDn
ELSE WORDt' . . . WORDn'
THEN ; (n - - )

If the number on the stack is positive, CHOOSE executes
WORDi WORD2 WORD, whereas if the number is negative
or 0, CHOOSE executes WORD1' WORDn' .

In either example, THEN marks the end of the branch, rather than
having its usual logical meaning”.

5? Looping and structured programming

FORTH contains words for setting up loops that can be deﬁnite
or indeﬁnite:

BEGIN )00t ﬂag UNTIL

The words represented by xxx are executed, leaving the TOS
(ﬂag) set to 0 (F) —at which point UNTIL leaves the loop — or
-1 (T) —at which point UNTIL makes the loop repeat from
BEGIN.

A variant is

BEGIN xxx ﬂag WHILE yyy REPEAT

Herc xxx is executed, WHILE tests the ﬂag and if it is 0 (F) leaves
the loop; whereas if flag is -1 (T) WHILE executes m and

 

13. ThishasledsomeFOngurustopreferthesynonymouswordENDIFascleuerthanTHEN.

emvm-Mmm.

26

ChepterZ—ProgrnmminginFORTi-i SclentIﬂcFonh

REPEAT then branches back to BEGIN. These forms can be used
to set up loops that repeat until some external event (pressing a
key at the keyboard, e.g.) sets the ﬂag to exit the loop. They can
also used to make endless loops (like the outer interpreter of
FORTH) by forcing flag to be 0 in a deﬁnition like

:ENDLESS BEGIN )00( 0 UNTIL ;

FORTH also implements indexed loops using the words DO
LOOP +LOOP /LOOP. These appear within deﬁnitions, e..g

: LOOP-EXAMPLE 100 0 DO )OOt LOOP ;

The words xxx will be executed 100 times as the lower limit, 0,
increases in unit steps to 99. To step by -2's, we use the phrase

—2 + LOOP

to replace LOOP, as in

: DOWN-BY-2's O 100 DO xxx -2 +LOOP ;

The word [LOOP 1s a variant of + LOOP for working with un-
signed limits1 and increments (to permit the loop index to go up
to 65535 1n 16-bit systems).

58 The pearl of FORTH

n unusual construct, CREATE. .DOES>, has been called
‘the pearl of FORT'H”15Th.is 15 more than poetic license.

CREATE is a component of the compiler that makes a new
dictionary entry with a given name (the next name in the input
stream) and has no other function.

DOES > assigns a speciﬁc run-time action to a newly CREATEd
word (we shall see this in §2§§8-3 below).

 

14.
15.

Signed l6-bit integers run from —32768 to + 32767, unsigted from 0 to 65535. See ”R.
Michael Ham, “Structured Programming”, Dr. Dobb’slmmal adel‘m Tools, October, 1%.

Sci-mm mz-Whm 27

"1 Dummy words
Sometimes we use CREATE to make a dummy entry that we
can later assign to some action:

CREATE DUMMY
CA' " DEFINES DUMMY

The second line translates as ‘The code address of 0 deﬁnes
DUMMY ”. Entry of the above phrase would let DUMMY perform

the job of 0 just by saying DUMMY. That is, FORTH lets us first
deﬁ1r6|e a dummy word, and then give it any other word’s mean-
ing .

Here is one use of this power: Suppose we have to deﬁne two
words that are alike except for some piece in the middle:

: *WORD WORD1 WORDZ " WORDS WORD4 ;
: *MIORD WORD1 WORDZ */ WORDS WORD4 ;

we could get away with 1 word, together with DUMMY from
above,

:a_or t/WORD
wOnm wonoz
DUMMY
wonoa WORD4 ;

by saying

CA' - DEFINES DUMMY *_or_"'/WORD
01'

CA' '/ DEFINES DUMMY ‘_or_‘/WORD.

 

16. This usage is a non-standard construct of BIS/FORTH.

